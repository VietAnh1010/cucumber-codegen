package com.github.vanh1010.cucumber.codegen.generator;

import java.lang.annotation.Annotation;
import java.util.List;

import javax.lang.model.element.Modifier;

import com.github.vanh1010.cucumber.codegen.gherkin.SuggestedAnnotation;
import com.github.vanh1010.cucumber.codegen.gherkin.SuggestedFeature;
import com.github.vanh1010.cucumber.codegen.gherkin.SuggestedParameter;
import com.github.vanh1010.cucumber.codegen.gherkin.SuggestedPickle;
import com.github.vanh1010.cucumber.codegen.gherkin.SuggestedStep;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

public record JavaPoetGenerator(GeneratorOptions generatorOptions) implements Generator<SuggestedFeature, String> {

    @Override
    public String generate(SuggestedFeature feature) {
        return null;
    }

    public TypeSpec generateFromFeature(SuggestedFeature feature) {
        TypeSpec.Builder typeSpecBuilder = TypeSpec.classBuilder(feature.name());
        feature.pickles()
                .stream()
                .map(this::generateFromPickle)
                .flatMap(List::stream)
                .forEach(typeSpecBuilder::addMethod);
        return typeSpecBuilder.build();

    }

    public List<MethodSpec> generateFromPickle(SuggestedPickle pickle) {
        return pickle.steps()
                .stream()
                .map(this::generateFromStep)
                .toList();
    }

    public MethodSpec generateFromStep(SuggestedStep step) {
        List<ParameterSpec> parameters = generateParametersForStep(step.parameters());
        AnnotationSpec annotation = generateAnnotationForStep(step.annotation());
        return MethodSpec
                .methodBuilder(step.name())
                .addAnnotation(annotation)
                .addModifiers(Modifier.PUBLIC)
                .returns(TypeName.VOID)
                .addParameters(parameters)
                .addCode(step.implementation())
                .build();
    }

    public AnnotationSpec generateAnnotationForStep(SuggestedAnnotation annotation) {
        ClassName annotationType = annotationFromKeyword(annotation.keyword());
        return AnnotationSpec
                .builder(annotationType)
                .addMember("value", "$S", annotation.pattern())
                .build();
    }

    public ClassName annotationFromKeyword(String keyword) {
        Class<? extends Annotation> annotationClass = switch (keyword.toLowerCase()) {
            case "given" -> generatorOptions.givenAnnotation();
            case "when" -> generatorOptions.whenAnnotation();
            case "then" -> generatorOptions.thenAnnotation();
            default -> throw new GenerationFailureException("Unknown keyword: " + keyword);
        };
        return ClassName.get(annotationClass);
    }

    public List<ParameterSpec> generateParametersForStep(List<SuggestedParameter> parameters) {
        return parameters.stream()
                .map(this::handleParameter)
                .toList();
    }

    public ParameterSpec handleParameter(SuggestedParameter parameter) {
        return ParameterSpec
                .builder(parameter.type(), parameter.name())
                .build();
    }
}
